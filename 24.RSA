#include <stdio.h>

// Function to calculate gcd(a, b) using Euclid's algorithm
int gcd(int a, int b) {
    int temp;
    while (b != 0) {
        temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Extended Euclidean algorithm to find multiplicative inverse of a modulo m
// Returns d such that a*d ≡ 1 (mod m), or -1 if inverse doesn't exist
int extendedEuclid(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1) return 0;

    // Apply extended Euclid algorithm
    while (a > 1) {
        // q is quotient
        q = a / m;

        t = m;

        // m is remainder now, process same as Euclid's algorithm
        m = a % m;
        a = t;

        // Update x and y
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0) x1 += m0;

    return x1;
}

int main() {
    int e = 31;
    int n = 3599;
    int p, q;

    // Factorizing n to find p and q
    for (p = 2; p * p <= n; ++p) {
        if (n % p == 0) {
            q = n / p;
            break;
        }
    }

    // Calculate Euler's totient function φ(n)
    int phi_n = (p - 1) * (q - 1);

    // Find private key d using extended Euclidean algorithm
    int d = extendedEuclid(e, phi_n);

    // Print the private key
    printf("Private key (d): %d\n", d);

    return 0;
}
